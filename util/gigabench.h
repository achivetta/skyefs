#ifndef DIR_BENCHMARK_H
#define DIR_BENCHMARK_H   


#define MAX_THREADS 64
#define MAX_PATH_LEN 256

//#define MAX_RUN_TIME 1024           //max run time (in seconds)

const char *kFilePrefix = "gFD";        //prefix for all file names

const char *kLogFilePrefix = "gBench";       //prefix for log files 

const char *kCreateThrLogSuffix = "c_thr";
const char *kCreateLatLogSuffix= "c_lat";
const char *kLookupThrLogSuffix = "l_thr";
const char *kLookupLatLogSuffix= "l_lat";

#define MSMT_GRANULARITY 1000       //throughput measured every N milliseconds
#define MAX_RUN_TIME     (1024*(1000/MSMT_GRANULARITY)) //max run time untis 

enum BenchmarkWorkload {
    CREATE_WORKLOAD,
    LOOKUP_WORKLOAD,
    SCAN_WORKLOAD,
    MIXED_WORKLOAD
};

struct BenchmarkDescriptor {
    int num_threads;                // Num of work generating threads 
    int num_files;                  // Number of ops generated by each thread
    char* dir_path;                 // Directory path 
    char* log_file_dir;             // Location of log files 
    
    char host_name[MAX_PATH_LEN];

    int workload_type;              // create, lookup, scan or mixed
    double mixed_frac;              //create-to-lookup ratio for mixed workloads
};
static struct BenchmarkDescriptor bench_desc;

struct PerWorkerThreadStats {
    int id;
    double start_time;
    double end_time;
    int completed_ops;

    //int inst_throughput[MAX_RUN_TIME];
    int *inst_throughput;
    double *per_op_latency;
};
static struct PerWorkerThreadStats *thread_stats;

// Descriptor with information about the work that each worker thread needs 
// to perform.
//
struct WorkerThreadDescriptor {
    int id;                         // (logical) id of the thread 
    int num_files;                  // num of files created by the thread
    int workload_type;              // type of workload generated by the thread

    char filename_prefix[MAX_PATH_LEN];  // prefix of filenames by this thread
   
    char create_thr_log_file[MAX_PATH_LEN];   //throughput log file
    char create_lat_log_file[MAX_PATH_LEN];   //latency log file
    
    char lookup_thr_log_file[MAX_PATH_LEN];   //throughput log file
    char lookup_lat_log_file[MAX_PATH_LEN];   //latency log file
};
struct WorkerThreadDescriptor *thread_desc;

//XXX: make it dynamically allocated?
pthread_t threads[MAX_THREADS];     //thread structure

static void init_threads();
static void* create_ops_thread(void *arg);
static void* lookup_ops_thread(void *arg);
static void* scan_ops_thread(void *arg);

//###Deprecated
//static void create_worker_threads(void *(*handler_func)(void *), 
//                                  void *handler_arg);

static void init_thread_stats();
static void cleanup_thread_stats();
static void print_throughput_stats(FILE *log_fp, int thd_id);
static void print_latency_stats(FILE *log_fp, int thd_id);
static void print_aggr_thread_stats();

static void init_settings();
static void print_settings();

static void usage();
static double get_time();

#endif /* DIR_BENCHMARK_H */
